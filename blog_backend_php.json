[
   {
      "id":"5",
      "title":"1st blog",
      "seo_title":"mrkdwn",
      "description":"just some random",
      "img_url":"https:\/\/cdn.pixabay.com\/photo\/2016\/05\/24\/16\/48\/mountains-1412683__340.png",
      "markdown":"---\r\n__Advertisement :)__\r\n\r\n- __[pica](https:\/\/nodeca.github.io\/pica\/demo\/)__ - high quality and fast image\r\n  resize in browser.",
      "author":"authorName",
      "date":"2021-05-11 08:07:19"
   },
   {
      "id":"6",
      "title":"New blog",
      "seo_title":"blog begin",
      "description":"i just made a blog",
      "img_url":"https:\/\/images.unsplash.com\/photo-1511497584788-876760111969?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8Zm9yZXN0fGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
      "markdown":"###I just uploaded the site to netlify\r\n#This is gonna be fun\r\n\r\n# Welcome to StackEdit!\r\n\r\nHi! I'm your first Markdown file in **StackEdit**. If you want to learn about StackEdit, you can read me. If you want to play with Markdown, you can edit me. Once you have finished with me, you can create new files by opening the **file explorer** on the left corner of the navigation bar.\r\n\r\n\r\n# Files\r\n\r\nStackEdit stores your files in your browser, which means all your files are automatically saved locally and are accessible **offline!**\r\n\r\n## Create files and folders\r\n\r\nThe file explorer is accessible using the button in left corner of the navigation bar. You can create a new file by clicking the **New file** button in the file explorer. You can also create folders by clicking the **New folder** button.\r\n\r\n## Switch to another file\r\n\r\nAll your files and folders are presented as a tree in the file explorer. You can switch from one to another by clicking a file in the tree.\r\n\r\n## Rename a file\r\n\r\nYou can rename the current file by clicking the file name in the navigation bar or by clicking the **Rename** button in the file explorer.\r\n\r\n## Delete a file\r\n\r\nYou can delete the current file by clicking the **Remove** button in the file explorer. The file will be moved into the **Trash** folder and automatically deleted after 7 days of inactivity.\r\n\r\n## Export a file\r\n\r\nYou can export the current file by clicking **Export to disk** in the menu. You can choose to export the file as plain Markdown, as HTML using a Handlebars template or as a PDF.\r\n\r\n\r\n# Synchronization\r\n\r\nSynchronization is one of the biggest features of StackEdit. It enables you to synchronize any file in your workspace with other files stored in your **Google Drive**, your **Dropbox** and your **GitHub** accounts. This allows you to keep writing on other devices, collaborate with people you share the file with, integrate easily into your workflow... The synchronization mechanism takes place every minute in the background, downloading, merging, and uploading file modifications.\r\n\r\nThere are two types of synchronization and they can complement each other:\r\n\r\n- The workspace synchronization will sync all your files, folders and settings automatically. This will allow you to fetch your workspace on any other device.\r\n\t> To start syncing your workspace, just sign in with Google in the menu.\r\n\r\n- The file synchronization will keep one file of the workspace synced with one or multiple files in **Google Drive**, **Dropbox** or **GitHub**.\r\n\t> Before starting to sync files, you must link an account in the **Synchronize** sub-menu.\r\n\r\n## Open a file\r\n\r\nYou can open a file from **Google Drive**, **Dropbox** or **GitHub** by opening the **Synchronize** sub-menu and clicking **Open from**. Once opened in the workspace, any modification in the file will be automatically synced.\r\n\r\n## Save a file\r\n\r\nYou can save any file of the workspace to **Google Drive**, **Dropbox** or **GitHub** by opening the **Synchronize** sub-menu and clicking **Save on**. Even if a file in the workspace is already synced, you can save it to another location. StackEdit can sync one file with multiple locations and accounts.\r\n\r\n## Synchronize a file\r\n\r\nOnce your file is linked to a synchronized location, StackEdit will periodically synchronize it by downloading\/uploading any modification. A merge will be performed if necessary and conflicts will be resolved.\r\n\r\nIf you just have modified your file and you want to force syncing, click the **Synchronize now** button in the navigation bar.\r\n\r\n> **Note:** The **Synchronize now** button is disabled if you have no file to synchronize.\r\n\r\n## Manage file synchronization\r\n\r\nSince one file can be synced with multiple locations, you can list and manage synchronized locations by clicking **File synchronization** in the **Synchronize** sub-menu. This allows you to list and remove synchronized locations that are linked to your file.\r\n\r\n\r\n# Publication\r\n\r\nPublishing in StackEdit makes it simple for you to publish online your files. Once you're happy with a file, you can publish it to different hosting platforms like **Blogger**, **Dropbox**, **Gist**, **GitHub**, **Google Drive**, **WordPress** and **Zendesk**. With [Handlebars templates](http:\/\/handlebarsjs.com\/), you have full control over what you export.\r\n\r\n> Before starting to publish, you must link an account in the **Publish** sub-menu.\r\n\r\n## Publish a File\r\n\r\nYou can publish your file by opening the **Publish** sub-menu and by clicking **Publish to**. For some locations, you can choose between the following formats:\r\n\r\n- Markdown: publish the Markdown text on a website that can interpret it (**GitHub** for instance),\r\n- HTML: publish the file converted to HTML via a Handlebars template (on a blog for example).\r\n\r\n## Update a publication\r\n\r\nAfter publishing, StackEdit keeps your file linked to that publication which makes it easy for you to re-publish it. Once you have modified your file and you want to update your publication, click on the **Publish now** button in the navigation bar.\r\n\r\n> **Note:** The **Publish now** button is disabled if your file has not been published yet.\r\n\r\n## Manage file publication\r\n\r\nSince one file can be published to multiple locations, you can list and manage publish locations by clicking **File publication** in the **Publish** sub-menu. This allows you to list and remove publication locations that are linked to your file.\r\n\r\n\r\n# Markdown extensions\r\n\r\nStackEdit extends the standard Markdown syntax by adding extra **Markdown extensions**, providing you with some nice features.\r\n\r\n> **ProTip:** You can disable any **Markdown extension** in the **File properties** dialog.\r\n\r\n\r\n## SmartyPants\r\n\r\nSmartyPants converts ASCII punctuation characters into \"smart\" typographic punctuation HTML entities. For example:\r\n\r\n|                |ASCII                          |HTML                         |\r\n|----------------|-------------------------------|-----------------------------|\r\n|Single backticks|`'Isn't this fun?'`            |'Isn't this fun?'            |\r\n|Quotes          |`\"Isn't this fun?\"`            |\"Isn't this fun?\"            |\r\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\r\n\r\n\r\n## KaTeX\r\n\r\nYou can render LaTeX mathematical expressions using [KaTeX](https:\/\/khan.github.io\/KaTeX\/):\r\n\r\nThe *Gamma function* satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n\r\n> You can find more information about **LaTeX** mathematical expressions [here](http:\/\/meta.math.stackexchange.com\/questions\/5020\/mathjax-basic-tutorial-and-quick-reference).\r\n\r\n\r\n## UML diagrams\r\n\r\nYou can render UML diagrams using [Mermaid](https:\/\/mermaidjs.github.io\/). For example, this will produce a sequence diagram:\r\n\r\n```mermaid\r\nsequenceDiagram\r\nAlice ->> Bob: Hello Bob, how are you?\r\nBob-->>John: How about you John?\r\nBob--x Alice: I am good thanks!\r\nBob-x John: I am good thanks!\r\nNote right of John: Bob thinks a long<br\/>long time, so long<br\/>that the text does<br\/>not fit on a row.\r\n\r\nBob-->Alice: Checking with John...\r\nAlice->John: Yes... John, how are you?\r\n```\r\n\r\nAnd this will produce a flow chart:\r\n\r\n```mermaid\r\ngraph LR\r\nA[Square Rect] -- Link text --> B((Circle))\r\nA --> C(Round Rect)\r\nB --> D{Rhombus}\r\nC --> D\r\n```\r\n",
      "author":"Abhiram Krishna",
      "date":"2021-05-11 08:17:45"
   },
   {
      "id":"7",
      "title":"Top 10 Most Useful Online Courses That Are Free",
      "seo_title":"",
      "description":"The best free courses from Harvard, Stanford, MIT and more\u2026",
      "img_url":"https:\/\/miro.medium.com\/max\/9216\/0*RJx8Bih14Dk7_vD5",
      "markdown":"I tend to prefer courses to books. Although the best books definitely beat mediocre courses, there's a few reasons why a great course can leave a lasting impression.\r\n\r\nFor starters, courses tend to teach foundational topics. Most books try to be original. But much of what's worth knowing is [actually fairly old](https:\/\/www.scotthyoung.com\/blog\/2020\/01\/27\/info-overload-fake\/).\r\n\r\nCourses tend to be more balanced. A professor teaching a basic course will try to explain most of the major viewpoints. Yet a popular book written by the same professor might be completely one-sided, as they try to make the strongest case for their views. Polemical works can be useful, but they can be misleading if you mistake a contentious issue for an open-and-shut case.\r\n\r\nI also just like watching courses. Reading is good. But so are listening and watching. If you do all three, you'll [probably learn more](https:\/\/www.scotthyoung.com\/blog\/2020\/03\/16\/audio-kindle-paper\/) than if you just stick to text.\r\n\r\nHere are my picks for the best free online courses to watch.\r\n\r\n1\\. Justice --- Michael Sandel (Harvard)\r\n======================================\r\n\r\nHonestly, this course is worth watching just to witness one of the best teachers of all time. Sandel teaches moral philosophy, not always known for being the most gripping topic. Yet the lectures are compelling, as students debate real-world examples that illustrate philosophical principles.\r\n\r\nWhat impresses me most is Sandel's ability to teach esoteric points through Socratic dialog with his students, using their own reactions to illustrate the philosophical principles he wants to teach. There's a reason this class is one of Harvard's most popular among incoming freshman. Now you don't need to attend Harvard to take it.\r\n\r\n2\\. Physics --- Walter Lewin (MIT)\r\n================================\r\n\r\nWalter Lewin's physics lectures (both classical and electromagnetism) were the ones I followed during the [MIT Challenge](https:\/\/www.scotthyoung.com\/blog\/myprojects\/mit-challenge-2\/). They're some of the finest classes I've ever taken online. Lewin manages to explain deep concepts about how the world works through exciting experiments. He's also [really good at drawing dotted lines](https:\/\/www.youtube.com\/watch?v=xODkb-i-t2M).\r\n\r\nUnfortunately there was a bit of a scandal on MIT's open platform which resulted in MIT removing any affiliation with Lewin for the course. Thus the lectures are harder to find online than they used to be. But since nothing ever truly gets removed from the internet, I think they're still worth watching if you want to learn physics.",
      "author":"Scot H Young",
      "date":"2021-05-14 04:42:39"
   },
   {
      "id":"8",
      "title":"The Surface Laptop 4 Is a Great MacBook Alternative for the Microsoft-Curious",
      "seo_title":"",
      "description":"This year\u2019s refresh is focused on internals, so it\u2019s what\u2019s on the inside that counts",
      "img_url":"https:\/\/miro.medium.com\/max\/5599\/1*Fmjq8BdLkGJgN4FUl39XXA.jpeg",
      "markdown":"For the last few years, Microsoft has been on a tear building some of the best laptops on the market alongside the most exciting developer tools available. For the last few weeks, I've been testing the company's new 15-inch [Surface Laptop 4](https:\/\/www.microsoft.com\/en-us\/p\/surface-laptop-4\/946627fb12t1?activetab=pivot:overviewtab), which is no exception.\r\n\r\nFrom the outside, the Surface Laptop 4 looks and feels similar to the previous generation of laptops; it's ultra-thin at 14.7 mm with a tall 3:2 display and comes in a slick set of colors to choose from as well as metal or Alcantara fabric finishes.\r\n\r\nBut this  year's refresh is focused on internals, so it's what's on the inside that counts: You can now choose from an 11th-gen Intel processor or a special AMD Ryzen 4000 \"Surface Edition\" option that sports a whopping eight cores.\r\n\r\n![The Surface Laptop 4 on a table with a screen full of code](https:\/\/miro.medium.com\/max\/6000\/1*TZZ0ToEaUrOphw5y_mI-ZQ.jpeg)\r\n\r\nThat AMD Ryzen configuration, which I've been testing, is an absolute beast. It handles difficult workloads like my Chrome, Docker, and PhpStorm coding workflow with seeming ease while remaining cool, rarely spinning up the fans. On the average laptop, that would be enough to send the fans soaring, but not so on the Surface Laptop 4.\r\n\r\nThe entire time I tested the Surface Laptop 4, I was rarely able to get it to be hot to the touch regardless of what I was doing on it, which is something I can't say for most of the 15-inch Intel laptops I've tested over the years, including Microsoft's own Surface Book 3. I couldn't really make it break a sweat outside of messing around with video editing software, which is a nice change of pace from the usual rocket fans on larger laptops.\r\n\r\n![The Surface Laptop 4](https:\/\/miro.medium.com\/max\/6000\/1*7GzfRM_CG3VnGvycHwDYYw.jpeg)\r\n\r\nUnlike Microsoft's competing high-end laptop, [the Surface Book 3](https:\/\/onezero.medium.com\/microsoft-finally-made-a-perfect-laptop-for-coding-gaming-and-zooming-2cc9a7148fca), the Laptop 4 isn't really designed to be a gaming computer --- it only has integrated graphics rather than a dedicated GPU. The integrated graphics are passable and can handle games like *Fortnite* or *Halo* on medium graphics, but set your expectations: You're not going to be getting high-end visuals out of this laptop.\r\n\r\nHowever, in exchange for inexplicably incredible battery life, I was able to get more than a full day's work out of the Surface Laptop 4 without even trying. And that includes development work and poking around on the web in Chrome. On average, I found I was able to get 11 hours of battery life on the recommended settings, which could likely be pushed higher if you were being conservative or running it in energy-saving mode.\r\n\r\n> The entire time I tested the Surface Laptop 4, I was rarely able to get it to be hot to the touch regardless of what I was doing on it.\r\n\r\nThat's the best battery life I've gotten by far in a 15-inch laptop to date, and it's not an exaggeration to say that it felt both surprising and liberating. I've been so disappointed by laptop battery life over the years that I generally go in with low expectations. My day-job laptop, the 15-inch 2019 MacBook Pro, struggles to last a few hours even with lightweight productivity work, so I know I need to hover near a power outlet. By contrast, I didn't have to worry about the Surface Laptop 4 --- to the point that I was surprised when I had to charge it.\r\n\r\n![](https:\/\/miro.medium.com\/max\/30\/1*fnef-MDGxBUtmohpDuJFdQ.jpeg?q=20)\r\n\r\n![](https:\/\/miro.medium.com\/max\/6000\/1*fnef-MDGxBUtmohpDuJFdQ.jpeg)\r\n\r\nNot much else about the Surface Laptop has changed on the outside. There are still single USB-C and USB-A ports, a 3.5 mm headphone jack, and the special magnetic Surface charger connector (though you can choose to charge the Laptop 4 via the USB-C port). The USB-C port still inexplicably lacks the faster Thunderbolt standard found on other devices, which feels short-sighted for a high-end device.\r\n\r\nThe 720p webcam isn't earth-shattering quality-wise, but it's better than the average laptop, and the dual studio microphones that reduce background audio make a big difference for my all-day meetings. But what always strikes me when I pick up a new Windows machine is just how slick the face-unlock feature (Windows Hello) makes the entire experience. Being able to nigh-instantly log in by looking at my computer is so much easier than messing around with a fingerprint scanner, and it always makes me wonder.",
      "author":"henry de mat",
      "date":"2021-05-14 04:47:52"
   },
   {
      "id":"9",
      "title":"E-mails through Python!",
      "seo_title":"",
      "description":"Sending e-mails using Python. Yes, you read it right.",
      "img_url":"https:\/\/www.incimages.com\/uploaded_files\/image\/1920x1080\/getty_660582997_412145.jpg",
      "markdown":"This article is going to revolve around how one can send e-mails through Gmail using Python using the SMTP and e-mail libraries. The methodology is pretty straight-forward and easy to follow. So without any further ado, let's begin!\r\n\r\nBefore you begin writing the code, you will need to make certain security changes to the Gmail account you intend to use for this little demonstration. All you need to do is go to 'Manage Your Google Account' and in there, go to the security settings. Once you are there, all you need to do is turn on the 'Less Secure App Access'.\r\n\r\n![](https:\/\/miro.medium.com\/max\/1768\/1*u-0Jq_7GmYSLlSUM1E6h5g.png)\r\n\r\nTurn this on.\r\n\r\nNow, we can start writing the code.\r\n\r\nFor this, you only require two libraries: SMTP and MIMEText from email library.\r\n\r\nSMTP or the 'Simple Mail Transfer Protocol' which essentially handles the sending and routing of emails between servers. Python generously provides us with an in-built smtplib module through which we can create a SMTP client session object which can be used to send emails.\r\n\r\nMIMEText from the email library will be used to construct the email, that is, the body and the subject.\r\n\r\nThe code looks like this.\r\n\r\nimport smtplib\\\r\nfrom email.mime.text import MIMETexts = smtplib.SMTP('smtp.gmail.com', 587)  #creates objects.starttls()s.login('sender_email@gmail.com', 'password')message = MIMEText('Hey')  #Body of the email\\\r\nmessage['Subject'] = 'Hi!'  #Subject of the email\\\r\nlist = ['receiver_address_1@gmail.com', 'receiver_address_2[@gmail.com](mailto:hemamatalia@gmail.com)']  #the list of all the destinationsfor i in list:\\\r\n    s.sendmail('sender_email@gmail.com', i, message.as_string())s.quit()\r\n\r\nYou could even read a file into a string and save that to the message as the body of the mail.\r\n\r\nFor simplicity, I sent myself a mail using this and the output you get after you run the program is something like this.\r\n\r\n![](https:\/\/miro.medium.com\/max\/60\/1*VZkPQ5DGYNkAQc6cs5t3IA.png?q=20)\r\n\r\n![](https:\/\/miro.medium.com\/max\/497\/1*VZkPQ5DGYNkAQc6cs5t3IA.png)\r\n\r\nThe received mail.\r\n\r\nThis little snippet of code could be a nice little weapon in your arsenal. You could use it to e-mail your output directly. You could even use it as an alert system and use it send alerts directly to your inbox. This is a pretty versatile piece of code and could take your program up a notch.\r\n\r\nI hope you liked this short article and please stay tuned for future projects.",
      "author":"harry",
      "date":"2021-05-14 04:50:20"
   },
   {
      "id":"10",
      "title":"How SpaceX lands Starship (sort of)",
      "seo_title":"space",
      "description":"aka: how I \u201caccidentally\u201d discovered what I already somewhat knew: optimization methods are at the heart of landing rockets.",
      "img_url":"https:\/\/miro.medium.com\/max\/4096\/1*pANB4H9lXLjmsyHHL7ikcw.jpeg",
      "markdown":"As part of a personal push to learn more about non-linear control, I have been playing around with a pretty powerful method known as trajectory optimization. Once the base code is set up, it's fairly easy to go apply to various systems. Here's a fun example of it being run on a drone:\r\n\r\n![](https:\/\/miro.medium.com\/freeze\/max\/60\/1*hsImSXWs3nTHHCNLz0qJdQ.gif?q=20)\r\n\r\n![](https:\/\/miro.medium.com\/max\/950\/1*hsImSXWs3nTHHCNLz0qJdQ.gif)\r\n\r\nDrone performing flips!\r\n\r\nWhile waiting for Starship SN15 to launch (it was in fact scrubbed, sad), I decided to pull together an estimate for some of it's dynamics and see if I could get my toy 2D simulation to perform that epic flip and land itself. To my excitement, after some finessing, it worked quite well. But what really surprised me was when I played the output side by side with actual landing footage: it lined up very very well. I wish I had gotten a live reaction of when this happened, I may or may not have jumped out of my chair. The whole program and optimization was written without any reference to the video or other explicit timing information.\r\n\r\nTo me, this means one of two things: either I got incredibly lucky, or SpaceX is running a very similar optimization on their actual system. I think both are true. The good people on twitter have taken an interest in this so I decided it might be fun to do a bit of a deep-ish dive into what's actually going on. It's some pretty fun stuff and hopefully gives a bit of a window into the wizardry going on behind landing rockets.\r\n\r\nBefore jumping into the code, its probably a good idea to explain the theory behind trajectory optimization (but feel free to jump straight to the code if you want too, I won't stop you). I am by no means an expert, and if you think something is off, feel free to reach out to me. I'll also provide links to content made by people who actually know what they are talking about.\r\n\r\nTrajectory optimization: What does an \"optimal trajectory\" even mean?\r\n=====================================================================\r\n\r\nFortunately, in this case, \"optimal\" means what it normally means: \"good\", \"best\", \"ideal\" and so on. As a simple example, imagine you want to walk across the room to get to your fridge: there are a seemingly infinite number of routes you can take, but somehow you pick only one of those to follow.\r\n\r\n![](https:\/\/miro.medium.com\/max\/3060\/1*7v-yAvFqAwSkrwuHb4NbPg.png)\r\n\r\nAn example of two trajectories\r\n\r\nIt should be fairly easy to see that there are good routes and bad routes, but what actually defines a good vs bad trajectory? This is where the concept of \"cost\" enters. If you have experience with machine learning, this is fundamentally the same concept. *You run your optimization to minimize your cost function.* In our fridge example, what's the cost function? An easy one to take would be the length of our path. It's now feasible to ask a computer to find a path between you and the fridge that has the shortest length.\r\n\r\n![](https:\/\/miro.medium.com\/max\/3030\/1*Abaoh4nOlWPWUIBKnHNMRA.png)\r\n\r\nPicking a cost function.\r\n------------------------\r\n\r\nThis works, but has some slight flaws. Imagine you have a pit of death\u2122 between you and the fridge. Our \"find the minimal length\" algorithm would run you right through that, which I think you might agree is not truly optimal.\r\n\r\n![](https:\/\/miro.medium.com\/max\/1442\/1*8Ouicd-pFNFWBJPmYZqI8w.png)\r\n\r\nA potentially better cost function (and what I mainly used in my Starship landing code) is based off of \"Effort\". Say that it takes you a 1 point of effort to move a step forward on the floor, and it takes you 1000 points of effort to go through the pit of death\u2122. This better matches what we consider to be optimal vs not optimal:",
      "author":"Elon",
      "date":"2021-05-14 04:52:32"
   }
]
